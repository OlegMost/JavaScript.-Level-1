// 1. Почему код дает именно такие результаты?

// Пример 1
let a = 1, b = 1, c, d;
c = ++a;
alert(c);       /* 2 <-- префикская форма инкремента сначала увеличивает
                значение на единицу, затем присваивает его переменной. */
// Пример 2
d = b++;
alert(d);       /* 1 <-- постфиксная форма инкремента сначала присваивает
                значение, затем увеличивает его на единицу. */
// Пример 3
c = (2+ ++a);
alert(c);       /* 5 <-- 'a' на момент выполнения равно 2 и увеличивается
                на 1 префиксно, получаем с = 2 + 3. */
// Пример 4
d = (2+ b++);
alert(d);       /* 4 <-- 'b' на момент выполнения равно 2, но увеличивается
                на 1 постфиксно (то есть в действии участвует его старое значение),
                получаем d = 2 + 2. */
alert(a);       /* 3 <-- изначально было 1 и дважды увеличивалось на 1 в операциях. */
alert(b);       /* 3 <-- изначально было 1 и дважды увеличивалось на 1 в операциях. */

// 2. Чему будет равен x в примере ниже?

let a = 2;
let x = 1 + (a *= 2); /*5 <-- действие в скобках умножает переменную 'a' на 2 и
                      присваивает ей полученное значение. Получаем x = 1 + 4. */

/* 3. Объявить две целочисленные переменные — a и b и задать им произвольные
начальные значения. Затем написать скрипт, который работает по следующему
принципу:
o если a и b положительные, вывести их разность;
o если а и b отрицательные, вывести их произведение;
o если а и b разных знаков, вывести их сумму;
Ноль можно считать положительным числом. */

let a = +prompt( 'Введите число a' ),
    b = +prompt( 'Введите число b' );
    if ( isNaN(a) || isNaN(b) ) {
    alert( 'Необходимо ввести числа!' );
}
else if ( a >= 0 && b >= 0 ) {
    alert( a - b );
}
else if ( a < 0 && b < 0) {
    alert( a * b );
}
else {
    alert( a + b );
}
alert( result );

/* 4. Реализовать четыре основные арифметические операции в виде функций с двумя
параметрами. Обязательно использовать оператор return. */

function add ( a, b ) {     // Сложение
    return a + b;
}
function sub ( a, b ) {     // Вычитание
    return a - b;
}
function div ( a, b ) {     // Деление
    return a / b;
}
function mul ( a, b ) {     // Умножение
    return a * b;
}

/* 5. Реализовать функцию с тремя параметрами:
function mathOperation(arg1, arg2, operation),
где arg1, arg2 — значения аргументов, operation — строка с названием
операции. В зависимости от переданного значения выполнить одну из
арифметических операций (использовать функции из пункта 4 и вернуть полученное
значение (применить switch). */

function mathOperation ( arg1, arg2, operation ) {
    switch (operation) {
        case '+':
            return add ( arg1, arg2 );
            break;
        case '-':
            return sub ( arg1, arg2 );
            break;
        case '/':
            return div ( arg1, arg2 );
            break;
        case '*':
            return mul ( arg1, arg2 );
            break;
    }
}
